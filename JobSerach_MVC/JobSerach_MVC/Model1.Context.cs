//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JobSerach_MVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Mvc_ProjectEntities : DbContext
    {
        public Mvc_ProjectEntities()
            : base("name=Mvc_ProjectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company_JobAdd_TB> Company_JobAdd_TB { get; set; }
        public virtual DbSet<CompanyRegTB> CompanyRegTBs { get; set; }
        public virtual DbSet<LoginTB> LoginTBs { get; set; }
        public virtual DbSet<UserRegTB> UserRegTBs { get; set; }
        public virtual DbSet<JobApplication_TB> JobApplication_TB { get; set; }
    
        public virtual int sp_companyInsert(Nullable<int> cid, string cname, string cadd, string cemail, string cwebadd, Nullable<long> cphone)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var cnameParameter = cname != null ?
                new ObjectParameter("cname", cname) :
                new ObjectParameter("cname", typeof(string));
    
            var caddParameter = cadd != null ?
                new ObjectParameter("cadd", cadd) :
                new ObjectParameter("cadd", typeof(string));
    
            var cemailParameter = cemail != null ?
                new ObjectParameter("cemail", cemail) :
                new ObjectParameter("cemail", typeof(string));
    
            var cwebaddParameter = cwebadd != null ?
                new ObjectParameter("cwebadd", cwebadd) :
                new ObjectParameter("cwebadd", typeof(string));
    
            var cphoneParameter = cphone.HasValue ?
                new ObjectParameter("cphone", cphone) :
                new ObjectParameter("cphone", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_companyInsert", cidParameter, cnameParameter, caddParameter, cemailParameter, cwebaddParameter, cphoneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_loginCountId(string una, string pwd)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_loginCountId", unaParameter, pwdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_loginId(string una, string pwd)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_loginId", unaParameter, pwdParameter);
        }
    
        public virtual int sp_logInsert(Nullable<int> rid, string una, string pwd, string utype)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            var utypeParameter = utype != null ?
                new ObjectParameter("utype", utype) :
                new ObjectParameter("utype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_logInsert", ridParameter, unaParameter, pwdParameter, utypeParameter);
        }
    
        public virtual ObjectResult<string> sp_loginType(string una, string pwd)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_loginType", unaParameter, pwdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MaxIdLogin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MaxIdLogin");
        }
    
        public virtual int sp_userInsert(Nullable<int> uid, string uname, string uadd, Nullable<long> uphone, string uemail, string uskill, Nullable<int> uexpyears, string uQuli, Nullable<System.DateTime> udob, string ucountry, string ustate, string ucity, string ugender, string uphoto, string upincode, string ulinkedinpro)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var uaddParameter = uadd != null ?
                new ObjectParameter("uadd", uadd) :
                new ObjectParameter("uadd", typeof(string));
    
            var uphoneParameter = uphone.HasValue ?
                new ObjectParameter("uphone", uphone) :
                new ObjectParameter("uphone", typeof(long));
    
            var uemailParameter = uemail != null ?
                new ObjectParameter("uemail", uemail) :
                new ObjectParameter("uemail", typeof(string));
    
            var uskillParameter = uskill != null ?
                new ObjectParameter("uskill", uskill) :
                new ObjectParameter("uskill", typeof(string));
    
            var uexpyearsParameter = uexpyears.HasValue ?
                new ObjectParameter("uexpyears", uexpyears) :
                new ObjectParameter("uexpyears", typeof(int));
    
            var uQuliParameter = uQuli != null ?
                new ObjectParameter("uQuli", uQuli) :
                new ObjectParameter("uQuli", typeof(string));
    
            var udobParameter = udob.HasValue ?
                new ObjectParameter("udob", udob) :
                new ObjectParameter("udob", typeof(System.DateTime));
    
            var ucountryParameter = ucountry != null ?
                new ObjectParameter("ucountry", ucountry) :
                new ObjectParameter("ucountry", typeof(string));
    
            var ustateParameter = ustate != null ?
                new ObjectParameter("ustate", ustate) :
                new ObjectParameter("ustate", typeof(string));
    
            var ucityParameter = ucity != null ?
                new ObjectParameter("ucity", ucity) :
                new ObjectParameter("ucity", typeof(string));
    
            var ugenderParameter = ugender != null ?
                new ObjectParameter("ugender", ugender) :
                new ObjectParameter("ugender", typeof(string));
    
            var uphotoParameter = uphoto != null ?
                new ObjectParameter("uphoto", uphoto) :
                new ObjectParameter("uphoto", typeof(string));
    
            var upincodeParameter = upincode != null ?
                new ObjectParameter("upincode", upincode) :
                new ObjectParameter("upincode", typeof(string));
    
            var ulinkedinproParameter = ulinkedinpro != null ?
                new ObjectParameter("ulinkedinpro", ulinkedinpro) :
                new ObjectParameter("ulinkedinpro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_userInsert", uidParameter, unameParameter, uaddParameter, uphoneParameter, uemailParameter, uskillParameter, uexpyearsParameter, uQuliParameter, udobParameter, ucountryParameter, ustateParameter, ucityParameter, ugenderParameter, uphotoParameter, upincodeParameter, ulinkedinproParameter);
        }
    
        public virtual int sp_companyJobAdd(Nullable<int> cId, string job_Title, string job_Description, string job_Skills, Nullable<int> jobexp_Year, string job_MinQuli, string job_Status, Nullable<System.DateTime> job_EndDate)
        {
            var cIdParameter = cId.HasValue ?
                new ObjectParameter("cId", cId) :
                new ObjectParameter("cId", typeof(int));
    
            var job_TitleParameter = job_Title != null ?
                new ObjectParameter("Job_Title", job_Title) :
                new ObjectParameter("Job_Title", typeof(string));
    
            var job_DescriptionParameter = job_Description != null ?
                new ObjectParameter("Job_Description", job_Description) :
                new ObjectParameter("Job_Description", typeof(string));
    
            var job_SkillsParameter = job_Skills != null ?
                new ObjectParameter("Job_Skills", job_Skills) :
                new ObjectParameter("Job_Skills", typeof(string));
    
            var jobexp_YearParameter = jobexp_Year.HasValue ?
                new ObjectParameter("Jobexp_Year", jobexp_Year) :
                new ObjectParameter("Jobexp_Year", typeof(int));
    
            var job_MinQuliParameter = job_MinQuli != null ?
                new ObjectParameter("Job_MinQuli", job_MinQuli) :
                new ObjectParameter("Job_MinQuli", typeof(string));
    
            var job_StatusParameter = job_Status != null ?
                new ObjectParameter("Job_Status", job_Status) :
                new ObjectParameter("Job_Status", typeof(string));
    
            var job_EndDateParameter = job_EndDate.HasValue ?
                new ObjectParameter("Job_EndDate", job_EndDate) :
                new ObjectParameter("Job_EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_companyJobAdd", cIdParameter, job_TitleParameter, job_DescriptionParameter, job_SkillsParameter, jobexp_YearParameter, job_MinQuliParameter, job_StatusParameter, job_EndDateParameter);
        }
    
        public virtual ObjectResult<sp_viewAllJobs_Result> sp_viewAllJobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_viewAllJobs_Result>("sp_viewAllJobs");
        }
    
        public virtual int sp_applycv(Nullable<int> uid, Nullable<int> jid, Nullable<int> cid, string resume, Nullable<System.DateTime> sDate, string aStatus)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var jidParameter = jid.HasValue ?
                new ObjectParameter("jid", jid) :
                new ObjectParameter("jid", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var resumeParameter = resume != null ?
                new ObjectParameter("resume", resume) :
                new ObjectParameter("resume", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var aStatusParameter = aStatus != null ?
                new ObjectParameter("aStatus", aStatus) :
                new ObjectParameter("aStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_applycv", uidParameter, jidParameter, cidParameter, resumeParameter, sDateParameter, aStatusParameter);
        }
    
        public virtual int sp_jobsearch(string qry)
        {
            var qryParameter = qry != null ?
                new ObjectParameter("qry", qry) :
                new ObjectParameter("qry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_jobsearch", qryParameter);
        }
    
        public virtual ObjectResult<sp_getjobApllication_Result> sp_getjobApllication(Nullable<int> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getjobApllication_Result>("sp_getjobApllication", cidParameter);
        }
    
        public virtual ObjectResult<sp_viewCompanyjobs_Result> sp_viewCompanyjobs(Nullable<int> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_viewCompanyjobs_Result>("sp_viewCompanyjobs", cidParameter);
        }
    
        public virtual ObjectResult<sp_viewApplayjobs_Result> sp_viewApplayjobs(Nullable<int> uid)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_viewApplayjobs_Result>("sp_viewApplayjobs", uidParameter);
        }
    
        public virtual ObjectResult<sp_viewProfile_Result> sp_viewProfile(Nullable<int> uid)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_viewProfile_Result>("sp_viewProfile", uidParameter);
        }
    }
}
